#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="StoreLocator")]
public partial class Shopper_modelDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertBadge(Badge instance);
  partial void UpdateBadge(Badge instance);
  partial void DeleteBadge(Badge instance);
  partial void InsertvisitedStore(visitedStore instance);
  partial void UpdatevisitedStore(visitedStore instance);
  partial void DeletevisitedStore(visitedStore instance);
  partial void InsertComment(Comment instance);
  partial void UpdateComment(Comment instance);
  partial void DeleteComment(Comment instance);
  partial void InserthasBadge(hasBadge instance);
  partial void UpdatehasBadge(hasBadge instance);
  partial void DeletehasBadge(hasBadge instance);
  partial void InsertStore(Store instance);
  partial void UpdateStore(Store instance);
  partial void DeleteStore(Store instance);
  partial void InsertType(Type instance);
  partial void UpdateType(Type instance);
  partial void DeleteType(Type instance);
  partial void InsertUser(User instance);
  partial void UpdateUser(User instance);
  partial void DeleteUser(User instance);
  #endregion
	
	public Shopper_modelDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["StoreLocatorConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public Shopper_modelDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public Shopper_modelDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public Shopper_modelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public Shopper_modelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Badge> Badges
	{
		get
		{
			return this.GetTable<Badge>();
		}
	}
	
	public System.Data.Linq.Table<visitedStore> visitedStores
	{
		get
		{
			return this.GetTable<visitedStore>();
		}
	}
	
	public System.Data.Linq.Table<Comment> Comments
	{
		get
		{
			return this.GetTable<Comment>();
		}
	}
	
	public System.Data.Linq.Table<hasBadge> hasBadges
	{
		get
		{
			return this.GetTable<hasBadge>();
		}
	}
	
	public System.Data.Linq.Table<Store> Stores
	{
		get
		{
			return this.GetTable<Store>();
		}
	}
	
	public System.Data.Linq.Table<Type> Types
	{
		get
		{
			return this.GetTable<Type>();
		}
	}
	
	public System.Data.Linq.Table<User> Users
	{
		get
		{
			return this.GetTable<User>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Badge")]
public partial class Badge : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _name;
	
	private string _description;
	
	private EntitySet<hasBadge> _hasBadges;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
	
	public Badge()
	{
		this._hasBadges = new EntitySet<hasBadge>(new Action<hasBadge>(this.attach_hasBadges), new Action<hasBadge>(this.detach_hasBadges));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string description
	{
		get
		{
			return this._description;
		}
		set
		{
			if ((this._description != value))
			{
				this.OndescriptionChanging(value);
				this.SendPropertyChanging();
				this._description = value;
				this.SendPropertyChanged("description");
				this.OndescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Badge_hasBadge", Storage="_hasBadges", ThisKey="id", OtherKey="badgeID")]
	public EntitySet<hasBadge> hasBadges
	{
		get
		{
			return this._hasBadges;
		}
		set
		{
			this._hasBadges.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_hasBadges(hasBadge entity)
	{
		this.SendPropertyChanging();
		entity.Badge = this;
	}
	
	private void detach_hasBadges(hasBadge entity)
	{
		this.SendPropertyChanging();
		entity.Badge = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.visitedStore")]
public partial class visitedStore : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _userID;
	
	private int _storeID;
	
	private int _totalCheckIns;
	
	private EntityRef<Store> _Store;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OnstoreIDChanging(int value);
    partial void OnstoreIDChanged();
    partial void OntotalCheckInsChanging(int value);
    partial void OntotalCheckInsChanged();
    #endregion
	
	public visitedStore()
	{
		this._Store = default(EntityRef<Store>);
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int userID
	{
		get
		{
			return this._userID;
		}
		set
		{
			if ((this._userID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnuserIDChanging(value);
				this.SendPropertyChanging();
				this._userID = value;
				this.SendPropertyChanged("userID");
				this.OnuserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_storeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int storeID
	{
		get
		{
			return this._storeID;
		}
		set
		{
			if ((this._storeID != value))
			{
				if (this._Store.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnstoreIDChanging(value);
				this.SendPropertyChanging();
				this._storeID = value;
				this.SendPropertyChanged("storeID");
				this.OnstoreIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_totalCheckIns", DbType="Int NOT NULL")]
	public int totalCheckIns
	{
		get
		{
			return this._totalCheckIns;
		}
		set
		{
			if ((this._totalCheckIns != value))
			{
				this.OntotalCheckInsChanging(value);
				this.SendPropertyChanging();
				this._totalCheckIns = value;
				this.SendPropertyChanged("totalCheckIns");
				this.OntotalCheckInsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Store_visitedStore", Storage="_Store", ThisKey="storeID", OtherKey="id", IsForeignKey=true)]
	public Store Store
	{
		get
		{
			return this._Store.Entity;
		}
		set
		{
			Store previousValue = this._Store.Entity;
			if (((previousValue != value) 
						|| (this._Store.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Store.Entity = null;
					previousValue.visitedStores.Remove(this);
				}
				this._Store.Entity = value;
				if ((value != null))
				{
					value.visitedStores.Add(this);
					this._storeID = value.id;
				}
				else
				{
					this._storeID = default(int);
				}
				this.SendPropertyChanged("Store");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_visitedStore", Storage="_User", ThisKey="userID", OtherKey="id", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.visitedStores.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.visitedStores.Add(this);
					this._userID = value.id;
				}
				else
				{
					this._userID = default(int);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comment")]
public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _title;
	
	private string _body;
	
	private int _userID;
	
	private int _storeID;
	
	private System.DateTime _datetime;
	
	private EntityRef<Store> _Store;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnbodyChanging(string value);
    partial void OnbodyChanged();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OnstoreIDChanging(int value);
    partial void OnstoreIDChanged();
    partial void OndatetimeChanging(System.DateTime value);
    partial void OndatetimeChanged();
    #endregion
	
	public Comment()
	{
		this._Store = default(EntityRef<Store>);
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(50)")]
	public string title
	{
		get
		{
			return this._title;
		}
		set
		{
			if ((this._title != value))
			{
				this.OntitleChanging(value);
				this.SendPropertyChanging();
				this._title = value;
				this.SendPropertyChanged("title");
				this.OntitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_body", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string body
	{
		get
		{
			return this._body;
		}
		set
		{
			if ((this._body != value))
			{
				this.OnbodyChanging(value);
				this.SendPropertyChanging();
				this._body = value;
				this.SendPropertyChanged("body");
				this.OnbodyChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Int NOT NULL")]
	public int userID
	{
		get
		{
			return this._userID;
		}
		set
		{
			if ((this._userID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnuserIDChanging(value);
				this.SendPropertyChanging();
				this._userID = value;
				this.SendPropertyChanged("userID");
				this.OnuserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_storeID", DbType="Int NOT NULL")]
	public int storeID
	{
		get
		{
			return this._storeID;
		}
		set
		{
			if ((this._storeID != value))
			{
				if (this._Store.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnstoreIDChanging(value);
				this.SendPropertyChanging();
				this._storeID = value;
				this.SendPropertyChanged("storeID");
				this.OnstoreIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_datetime", DbType="DateTime NOT NULL")]
	public System.DateTime datetime
	{
		get
		{
			return this._datetime;
		}
		set
		{
			if ((this._datetime != value))
			{
				this.OndatetimeChanging(value);
				this.SendPropertyChanging();
				this._datetime = value;
				this.SendPropertyChanged("datetime");
				this.OndatetimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Store_Comment", Storage="_Store", ThisKey="storeID", OtherKey="id", IsForeignKey=true)]
	public Store Store
	{
		get
		{
			return this._Store.Entity;
		}
		set
		{
			Store previousValue = this._Store.Entity;
			if (((previousValue != value) 
						|| (this._Store.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Store.Entity = null;
					previousValue.Comments.Remove(this);
				}
				this._Store.Entity = value;
				if ((value != null))
				{
					value.Comments.Add(this);
					this._storeID = value.id;
				}
				else
				{
					this._storeID = default(int);
				}
				this.SendPropertyChanged("Store");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_User", ThisKey="userID", OtherKey="id", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Comments.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Comments.Add(this);
					this._userID = value.id;
				}
				else
				{
					this._userID = default(int);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.hasBadge")]
public partial class hasBadge : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _userID;
	
	private int _badgeID;
	
	private EntityRef<Badge> _Badge;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OnbadgeIDChanging(int value);
    partial void OnbadgeIDChanged();
    #endregion
	
	public hasBadge()
	{
		this._Badge = default(EntityRef<Badge>);
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int userID
	{
		get
		{
			return this._userID;
		}
		set
		{
			if ((this._userID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnuserIDChanging(value);
				this.SendPropertyChanging();
				this._userID = value;
				this.SendPropertyChanged("userID");
				this.OnuserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_badgeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int badgeID
	{
		get
		{
			return this._badgeID;
		}
		set
		{
			if ((this._badgeID != value))
			{
				if (this._Badge.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnbadgeIDChanging(value);
				this.SendPropertyChanging();
				this._badgeID = value;
				this.SendPropertyChanged("badgeID");
				this.OnbadgeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Badge_hasBadge", Storage="_Badge", ThisKey="badgeID", OtherKey="id", IsForeignKey=true)]
	public Badge Badge
	{
		get
		{
			return this._Badge.Entity;
		}
		set
		{
			Badge previousValue = this._Badge.Entity;
			if (((previousValue != value) 
						|| (this._Badge.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Badge.Entity = null;
					previousValue.hasBadges.Remove(this);
				}
				this._Badge.Entity = value;
				if ((value != null))
				{
					value.hasBadges.Add(this);
					this._badgeID = value.id;
				}
				else
				{
					this._badgeID = default(int);
				}
				this.SendPropertyChanged("Badge");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_hasBadge", Storage="_User", ThisKey="userID", OtherKey="id", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.hasBadges.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.hasBadges.Add(this);
					this._userID = value.id;
				}
				else
				{
					this._userID = default(int);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Store")]
public partial class Store : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _name;
	
	private string _city;
	
	private int _typeID;
	
	private double _latitude;
	
	private double _longitude;
	
	private EntitySet<visitedStore> _visitedStores;
	
	private EntitySet<Comment> _Comments;
	
	private EntityRef<Type> _Type;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OncityChanging(string value);
    partial void OncityChanged();
    partial void OntypeIDChanging(int value);
    partial void OntypeIDChanged();
    partial void OnlatitudeChanging(double value);
    partial void OnlatitudeChanged();
    partial void OnlongitudeChanging(double value);
    partial void OnlongitudeChanged();
    #endregion
	
	public Store()
	{
		this._visitedStores = new EntitySet<visitedStore>(new Action<visitedStore>(this.attach_visitedStores), new Action<visitedStore>(this.detach_visitedStores));
		this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
		this._Type = default(EntityRef<Type>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_city", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string city
	{
		get
		{
			return this._city;
		}
		set
		{
			if ((this._city != value))
			{
				this.OncityChanging(value);
				this.SendPropertyChanging();
				this._city = value;
				this.SendPropertyChanged("city");
				this.OncityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typeID", DbType="Int NOT NULL")]
	public int typeID
	{
		get
		{
			return this._typeID;
		}
		set
		{
			if ((this._typeID != value))
			{
				if (this._Type.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OntypeIDChanging(value);
				this.SendPropertyChanging();
				this._typeID = value;
				this.SendPropertyChanged("typeID");
				this.OntypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_latitude", DbType="Float NOT NULL")]
	public double latitude
	{
		get
		{
			return this._latitude;
		}
		set
		{
			if ((this._latitude != value))
			{
				this.OnlatitudeChanging(value);
				this.SendPropertyChanging();
				this._latitude = value;
				this.SendPropertyChanged("latitude");
				this.OnlatitudeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_longitude", DbType="Float NOT NULL")]
	public double longitude
	{
		get
		{
			return this._longitude;
		}
		set
		{
			if ((this._longitude != value))
			{
				this.OnlongitudeChanging(value);
				this.SendPropertyChanging();
				this._longitude = value;
				this.SendPropertyChanged("longitude");
				this.OnlongitudeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Store_visitedStore", Storage="_visitedStores", ThisKey="id", OtherKey="storeID")]
	public EntitySet<visitedStore> visitedStores
	{
		get
		{
			return this._visitedStores;
		}
		set
		{
			this._visitedStores.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Store_Comment", Storage="_Comments", ThisKey="id", OtherKey="storeID")]
	public EntitySet<Comment> Comments
	{
		get
		{
			return this._Comments;
		}
		set
		{
			this._Comments.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Type_Store", Storage="_Type", ThisKey="typeID", OtherKey="id", IsForeignKey=true)]
	public Type Type
	{
		get
		{
			return this._Type.Entity;
		}
		set
		{
			Type previousValue = this._Type.Entity;
			if (((previousValue != value) 
						|| (this._Type.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Type.Entity = null;
					previousValue.Stores.Remove(this);
				}
				this._Type.Entity = value;
				if ((value != null))
				{
					value.Stores.Add(this);
					this._typeID = value.id;
				}
				else
				{
					this._typeID = default(int);
				}
				this.SendPropertyChanged("Type");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_visitedStores(visitedStore entity)
	{
		this.SendPropertyChanging();
		entity.Store = this;
	}
	
	private void detach_visitedStores(visitedStore entity)
	{
		this.SendPropertyChanging();
		entity.Store = null;
	}
	
	private void attach_Comments(Comment entity)
	{
		this.SendPropertyChanging();
		entity.Store = this;
	}
	
	private void detach_Comments(Comment entity)
	{
		this.SendPropertyChanging();
		entity.Store = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Type")]
public partial class Type : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _name;
	
	private EntitySet<Store> _Stores;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
	
	public Type()
	{
		this._Stores = new EntitySet<Store>(new Action<Store>(this.attach_Stores), new Action<Store>(this.detach_Stores));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Type_Store", Storage="_Stores", ThisKey="id", OtherKey="typeID")]
	public EntitySet<Store> Stores
	{
		get
		{
			return this._Stores;
		}
		set
		{
			this._Stores.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Stores(Store entity)
	{
		this.SendPropertyChanging();
		entity.Type = this;
	}
	
	private void detach_Stores(Store entity)
	{
		this.SendPropertyChanging();
		entity.Type = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _email;
	
	private string _password;
	
	private EntitySet<visitedStore> _visitedStores;
	
	private EntitySet<Comment> _Comments;
	
	private EntitySet<hasBadge> _hasBadges;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    #endregion
	
	public User()
	{
		this._visitedStores = new EntitySet<visitedStore>(new Action<visitedStore>(this.attach_visitedStores), new Action<visitedStore>(this.detach_visitedStores));
		this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
		this._hasBadges = new EntitySet<hasBadge>(new Action<hasBadge>(this.attach_hasBadges), new Action<hasBadge>(this.detach_hasBadges));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string email
	{
		get
		{
			return this._email;
		}
		set
		{
			if ((this._email != value))
			{
				this.OnemailChanging(value);
				this.SendPropertyChanging();
				this._email = value;
				this.SendPropertyChanged("email");
				this.OnemailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
	public string password
	{
		get
		{
			return this._password;
		}
		set
		{
			if ((this._password != value))
			{
				this.OnpasswordChanging(value);
				this.SendPropertyChanging();
				this._password = value;
				this.SendPropertyChanged("password");
				this.OnpasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_visitedStore", Storage="_visitedStores", ThisKey="id", OtherKey="userID")]
	public EntitySet<visitedStore> visitedStores
	{
		get
		{
			return this._visitedStores;
		}
		set
		{
			this._visitedStores.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_Comments", ThisKey="id", OtherKey="userID")]
	public EntitySet<Comment> Comments
	{
		get
		{
			return this._Comments;
		}
		set
		{
			this._Comments.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_hasBadge", Storage="_hasBadges", ThisKey="id", OtherKey="userID")]
	public EntitySet<hasBadge> hasBadges
	{
		get
		{
			return this._hasBadges;
		}
		set
		{
			this._hasBadges.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_visitedStores(visitedStore entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_visitedStores(visitedStore entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_Comments(Comment entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_Comments(Comment entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_hasBadges(hasBadge entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_hasBadges(hasBadge entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
}
#pragma warning restore 1591
